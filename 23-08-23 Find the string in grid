//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
	vector<vector<int>>searchWord(vector<vector<char>>grid, string word){
	    // Code here
	    int dir[8][2]={{-1,0},{0,-1},{1,1},{-1,-1},{1,0},{0,1},{-1,1},{1,-1}};
	    vector<vector<int>> ans;
	    int n=grid.size(),m=grid[0].size();
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<m;j++)
	        {
	            if(word[0]==grid[i][j])
	            {
	                for(int k=0;k<8;k++)
	                {
	                    int l=0;
	                    int r=i,c=j;
	                    while(l<word.length() && r>=0 && r<n && c>=0 && c<m && grid[r][c]==word[l])
	                    {
	                        r+=dir[k][0];
	                        c+=dir[k][1];
	                        l++;
	                    }
	                    if(l==word.size())
	                    {
	                        ans.push_back({i,j});
	                        break;
	                    }
	                }
	            }
	        }
	    }
	    return ans;
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<char>>grid(n, vector<char>(m,'x'));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++)
				cin >> grid[i][j];
		}
		string word;
		cin >> word;
		Solution obj;
		vector<vector<int>>ans = obj.searchWord(grid, word);
		if(ans.size() == 0)
		{
		    cout<<"-1\n";
		}
		else
		{
		    for(auto i: ans){
			for(auto j: i)
				cout << j << " ";
			cout << "\n";
		    }
		}
		
		
	}
	return 0;
}
// } Driver Code Ends

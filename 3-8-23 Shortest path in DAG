
class Solution {
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        vector<vector<pair<int,int>>>adj(N);
        for(auto i:edges)
        {
            adj[i[0]].push_back({i[1],i[2]});
        }
        vector<int>d(N,-1);
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>p;
        
        d[0]=0;
        p.push({0,0});
        while(!p.empty())
        {
            auto t=p.top();
            p.pop();
            for(auto i:adj[t.second])
            {
                if(d[i.first]==-1 || d[i.first]>d[t.second]+i.second)
                {
                     d[i.first]=d[t.second]+i.second;
                     p.push({d[i.first],i.first});
                }
            }
        }
        return d;
    }
};


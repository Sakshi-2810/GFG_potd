  bool canMove(int nx , int ny , vector<vector<int>> A) {
        if(nx >= 0 && nx < A.size() && ny >= 0 && ny < A[0].size() && A[nx][ny] == 1) return true;
        return false;
    }
    int shortestDistance(int N, int M, vector<vector<int>> A, int X, int Y) {
       queue<pair<int,int>> q;
       q.push({0,0});
       A[0][0] = -1;
       int steps = 0;
       int dx[] = {0,1,0,-1};
       int dy[] = {1,0,-1,0};
       while(!q.empty()) {
           int sz = q.size();
           while(sz--) {
               int a = q.front().first;
               int b = q.front().second;
               q.pop();
               if(a == X && b == Y) return steps;
               for(int i=0 ; i<4 ; i++) {
                   int nx = a+dx[i];
                   int ny = b+dy[i];
                   if(canMove(nx,ny,A)) {
                       A[nx][ny] = -1;
                       q.push({nx,ny});
                   }
               }
           }
           steps++;
       }
       return -1;
    }
